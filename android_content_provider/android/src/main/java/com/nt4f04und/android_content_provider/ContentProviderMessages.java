// Autogenerated from Pigeon (v1.0.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.nt4f04und.android_content_provider;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class ContentProviderMessages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CreateMessage {
    private String authority;
    public String getAuthority() { return authority; }
    public void setAuthority(String setterArg) { this.authority = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("authority", authority);
      return toMapResult;
    }
    static CreateMessage fromMap(Map<String, Object> map) {
      CreateMessage fromMapResult = new CreateMessage();
      Object authority = map.get("authority");
      fromMapResult.authority = (String)authority;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class GetTypeMessage {
    private String uri;
    public String getUri() { return uri; }
    public void setUri(String setterArg) { this.uri = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("uri", uri);
      return toMapResult;
    }
    static GetTypeMessage fromMap(Map<String, Object> map) {
      GetTypeMessage fromMapResult = new GetTypeMessage();
      Object uri = map.get("uri");
      fromMapResult.uri = (String)uri;
      return fromMapResult;
    }
  }
  private static class ContentProviderApiCodec extends StandardMessageCodec {
    public static final ContentProviderApiCodec INSTANCE = new ContentProviderApiCodec();
    private ContentProviderApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CreateMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return GetTypeMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CreateMessage) {
        stream.write(128);
        writeValue(stream, ((CreateMessage) value).toMap());
      } else 
      if (value instanceof GetTypeMessage) {
        stream.write(129);
        writeValue(stream, ((GetTypeMessage) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class ContentProviderApi {
    private final BinaryMessenger binaryMessenger;
    public ContentProviderApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return ContentProviderApiCodec.INSTANCE;
    }

    public void create(CreateMessage messageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ContentProviderApi.create", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(messageArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void getType(GetTypeMessage messageArg, Reply<String> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ContentProviderApi.getType", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(messageArg)), channelReply -> {
        @SuppressWarnings("ConstantConditions")
        String output = (String)channelReply;
        callback.reply(output);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
