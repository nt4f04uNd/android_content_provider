class AndroidContentResolver {
  // acquireContentProviderClient(uri: Uri)
  // acquireContentProviderClient(name: String)
  // acquireUnstableContentProviderClient(uri: Uri)
  // acquireUnstableContentProviderClient(name: String)
  // addPeriodicSync(account: Account!, authority: String!, extras: Bundle!, pollFrequency: Long)
  // addStatusChangeListener(mask: Int, callback: SyncStatusObserver!)
  // applyBatch(authority: String, operations: ArrayList<ContentProviderOperation!>)
  // bulkInsert(url: Uri, values: Array<ContentValues!>)
  // call(uri: Uri, method: String, arg: String?, extras: Bundle?)
  // call(authority: String, method: String, arg: String?, extras: Bundle?)
  // cancelSync(uri: Uri!)
  // cancelSync(account: Account!, authority: String!)
  // cancelSync(request: SyncRequest!)
  // canonicalize(url: Uri)
  // delete(url: Uri, where: String?, selectionArgs: Array<String!>?)
  // delete(url: Uri, extras: Bundle?)
  // getCurrentSync()
  // getCurrentSyncs()
  // getIsSyncable(account: Account!, authority: String!)
  // getMasterSyncAutomatically()
  // getOutgoingPersistedUriPermissions()
  // getPeriodicSyncs(account: Account!, authority: String!)
  // getPersistedUriPermissions()
  // getStreamTypes(url: Uri, mimeTypeFilter: String)
  // getSyncAdapterTypes()
  // getSyncAutomatically(account: Account!, authority: String!)
  // getType(url: Uri)
  // getTypeInfo(mimeType: String)
  // insert(url: Uri, values: ContentValues?)
  // insert(url: Uri, values: ContentValues?, extras: Bundle?)
  // isSyncActive(account: Account!, authority: String!)
  // isSyncPending(account: Account!, authority: String!)
  // loadThumbnail(uri: Uri, size: Size, signal: CancellationSignal?)
  // notifyChange(uri: Uri, observer: ContentObserver?)
  // notifyChange(uri: Uri, observer: ContentObserver?, syncToNetwork: Boolean)
  // notifyChange(uri: Uri, observer: ContentObserver?, flags: Int)
  // notifyChange(uris: MutableCollection<Uri!>, observer: ContentObserver?, flags: Int)
  // openAssetFile(uri: Uri, mode: String, signal: CancellationSignal?)
  // openAssetFileDescriptor(uri: Uri, mode: String)
  // openAssetFileDescriptor(uri: Uri, mode: String, cancellationSignal: CancellationSignal?)
  // openFile(uri: Uri, mode: String, signal: CancellationSignal?)
  // openFileDescriptor(uri: Uri, mode: String)
  // openFileDescriptor(uri: Uri, mode: String, cancellationSignal: CancellationSignal?)
  // openInputStream(uri: Uri)
  // openOutputStream(uri: Uri)
  // openOutputStream(uri: Uri, mode: String)
  // openTypedAssetFile(uri: Uri, mimeTypeFilter: String, opts: Bundle?, signal: CancellationSignal?)
  // openTypedAssetFileDescriptor(uri: Uri, mimeType: String, opts: Bundle?)
  // openTypedAssetFileDescriptor(uri: Uri, mimeType: String, opts: Bundle?, cancellationSignal: CancellationSignal?)
  // query(uri: Uri, projection: Array<String!>?, selection: String?, selectionArgs: Array<String!>?, sortOrder: String?)
  // query(uri: Uri, projection: Array<String!>?, selection: String?, selectionArgs: Array<String!>?, sortOrder: String?, cancellationSignal: CancellationSignal?)
  // query(uri: Uri, projection: Array<String!>?, queryArgs: Bundle?, cancellationSignal: CancellationSignal?)
  // refresh(url: Uri, extras: Bundle?, cancellationSignal: CancellationSignal?)
  // registerContentObserver(uri: Uri, notifyForDescendants: Boolean, observer: ContentObserver)
  // releasePersistableUriPermission(uri: Uri, modeFlags: Int)
  // removePeriodicSync(account: Account!, authority: String!, extras: Bundle!)
  // removeStatusChangeListener(handle: Any!)
  // requestSync(account: Account!, authority: String!, extras: Bundle!)
  // requestSync(request: SyncRequest!)
  // setIsSyncable(account: Account!, authority: String!, syncable: Int)  	
  // setMasterSyncAutomatically(sync: Boolean)
  // setSyncAutomatically(account: Account!, authority: String!, sync: Boolean)
  // startSync(uri: Uri!, extras: Bundle!)
  // takePersistableUriPermission(uri: Uri, modeFlags: Int)
  // uncanonicalize(url: Uri)
  // unregisterContentObserver(observer: ContentObserver)
  // update(uri: Uri, values: ContentValues?, where: String?, selectionArgs: Array<String!>?)
  // update(uri: Uri, values: ContentValues?, extras: Bundle?)
  // validateSyncExtrasBundle(extras: Bundle!)
  // wrap(wrapped: ContentProvider)
  // wrap(wrapped: ContentProviderClient)
}